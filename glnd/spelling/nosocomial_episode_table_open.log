1                                                          The SAS System                             14:42 Tuesday, October 5, 2010

NOTE: Copyright (c) 2002-2003 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) 9.1 (TS1M3)
      Licensed to EMORY UNIVERSITY - T&R, Site 0014217002.
NOTE: This session is executing on the SunOS 5.9 platform.



NOTE: SAS 9.1.3 Service Pack 4

You are running SAS 9. Some SAS 8 files will be automatically converted 
by the V9 engine; others are incompatible.  Please see 
http://support.sas.com/rnd/migration/planning/platform/64bit.html

PROC MIGRATE will preserve current SAS file attributes and is 
recommended for converting all your SAS libraries from any 
SAS 8 release to SAS 9.  For details and examples, please see
http://support.sas.com/rnd/migration/index.html


This message is contained in the SAS news file, and is presented upon
initialization.  Edit the file "news" in the "misc/base" directory to
display site-specific news and information in the program log.
The command line option "-nonews" will prevent this display.




NOTE: SAS initialization used:
      real time           0.30 seconds
      cpu time            0.08 seconds
      

NOTE: AUTOEXEC processing beginning; file is /home/bwu2/spelling/autoexec.sas.

NOTE: Libref RAND was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /glnd/sas/randomization
NOTE: Libref GLND was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /glnd/sas
NOTE: Libref LIBRARY was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /home/bwu2/spelling
NOTE: Libref GLND_DF was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /glnd/sas/reporting/df_reporting
NOTE: Libref GLND_EXT was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /glnd/sas/external_data
NOTE: Libref GLND_REP was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /glnd/sas/reporting

NOTE: AUTOEXEC processing completed.

1          /** nosocomial_episode_table_open.sas	
2           *
3           * Based on code from nosocomial_open.sas, as last used for the February 2008 DSMB report
2                                                          The SAS System                             14:42 Tuesday, October 5, 2010

4           *
5           * This allows the code for the open report version of the nosocomial infection episode table to be re-used, for example
5        ! by the
6           * infection adjudication reporting programs.
7           *
8           **/
9          
10         %macro nosocomial_episode_table_open (datasource = , filename = , n_study = , custom_title = ) ; * n_study is "number of
10       ! patients" in denominators ;
11         
12         	** THE NEXT SECTION USED TO ARE IN THE FIRST PART OF THE BODY OF NOSOCOMIAL_OPEN.SAS **;
13         	data &datasource;
14         		length organism_1 $ 100;
15         		length organism_2 $ 100;
16         		length organism_3 $ 100;
17         		length organism_4 $ 100;
18         		length organism_5 $ 100;
19         
20         		set &datasource;
21         
22         		*** CLEAN UP DISPLAY IN DATASETS, REMOVE REPEAT ORGANISMS ***;
23         		* Set up text field to contain organism format. need to have text rather than numeric so can adjust the "other people";
23       ! 
24         			/**/
25         			organism_1 = put(cult_org_code_1, cult_org_code.);
26         			organism_2 = put(cult_org_code_2, cult_org_code.);
27         			organism_3 = put(cult_org_code_3, cult_org_code.);
28         			organism_4 = put(cult_org_code_4, cult_org_code.);
29         			organism_5 = put(cult_org_code_5, cult_org_code.);
30         			/**/
31         
32         		* Adjust "other" categories to include the name of the organism;
33         			if (cult_org_code_1 in (9, 20, 21,22,23)) then organism_1= trim(put(organism_1, $30.)) || " - " ||
33       ! trim(put(org_spec_1, $50.)) ;
34         			if (cult_org_code_2 in (9, 20, 21,22,23)) then organism_2= trim(put(organism_2, $30.)) || " - " ||
34       ! trim(put(org_spec_2, $50.)) ;
35         			if (cult_org_code_3 in (9, 20, 21,22,23)) then organism_3= trim(put(organism_3, $30.)) || " - " ||
35       ! trim(put(org_spec_3, $50.)) ;
36         			if (cult_org_code_4 in (9, 20, 21,22,23)) then organism_4= trim(put(organism_4, $30.)) || " - " ||
36       ! trim(put(org_spec_4, $50.)) ;
37         			if (cult_org_code_5 in (9, 20, 21,22,23)) then organism_5= trim(put(organism_5, $30.)) || " - " ||
37       ! trim(put(org_spec_5, $50.)) ;
38         
39         
40         		* remove repeat organisms from the same infection report, comparing the text labels, working backwards from the 5th
40       ! organism ;
41         			if (organism_5 = organism_4) then do; organism_5 = .; cult_org_code_5 = .; org_spec_5 = .; end;
42         			if (organism_4 = organism_3) then do; organism_4 = .; cult_org_code_4 = .; org_spec_4 = .; end;
43         			if (organism_3 = organism_2) then do; organism_3 = .; cult_org_code_3 = .; org_spec_3 = .; end;
44         			if (organism_2 = organism_1) then do; organism_2 = .; cult_org_code_2 = .; org_spec_2 = .; end;
45         			
46         		label	
47         			organism_1 ="1st cult. org."
48         			organism_2 ="2nd cult. org."
49         			organism_3 ="3rd cult. org."
50         			organism_4 ="4th cult. org."
51         			organism_5 ="5th cult. org."
52         		;		
3                                                          The SAS System                             14:42 Tuesday, October 5, 2010

53         	
54         	run;
55         
56         
57         /**  PRODUCE BY SITE AND TYPE TABLE, with organism listing **/
58         
59         	* first, we need the data arranged two way - by number of unique infection episodes and by cultured organisms;
60         
61         	* number of unique episodes is straight-forward - simply take noso, filter out non-confirmed infections ;
62         	data by_episode;
63         		set &datasource; 
64         
65         		where (infect_confirm in (1,2)); * only look at positive infections with positive cultures ; 
66         
67         
68         		site_code_label = trim(put(site_code, site_code.));
69         		type_code_label = trim(put(type_code, type_code.));
70         
71         		drop organism_1 organism_2 organism_3 organism_4 organism_5 cult_org_code_1 cult_org_code_2 cult_org_code_3
71       ! cult_org_code_4 cult_org_code_5
72         			org_spec_1 org_spec_2 org_spec_3 org_spec_4 org_spec_5;
73         	run;
74         
75         	* now list by organism ... ; 
76         	* unlike the previous by_organism, this dataset has records for those infections w/o a listed organism ;
77         	data by_organism_all_infec;
78         		set &datasource;
79         
80         		where (infect_confirm in (1,2)); * only look at positive infections with positive cultures ; 
81         
82         		/*organism= " 													";
83         		* work backwards from oganism_5,  ... ;
84         		if cult_org_code_5 ~= . then do; organism = trim(organism) || ", " || organism_5; end;
85         		if cult_org_code_4 ~= . then do; organism = trim(organism) || ", " || organism_4; end;
86         		if cult_org_code_3 ~= . then do; organism = trim(organism) || ", " || organism_3; end;
87         		if cult_org_code_2 ~= . then do; organism = trim(organism) || ", " || organism_2; end;
88         
89         		if cult_org_code_1 ~= . then do; organism = trim(organism) || ", " || organism_1; end;
90         		*/
91         		if cult_org_code_5 ~= . then do; organism = organism_5; cult_org_code = cult_org_code_5; org_spec = org_spec_5; output;
91       !  end;
92         		if cult_org_code_4 ~= . then do; organism = organism_4; cult_org_code = cult_org_code_4; org_spec = org_spec_4; output;
92       !  end;
93         		if cult_org_code_3 ~= . then do; organism = organism_3; cult_org_code = cult_org_code_3; org_spec = org_spec_3; output;
93       !  end;
94         		if cult_org_code_2 ~= . then do; organism = organism_2; cult_org_code = cult_org_code_2; org_spec = org_spec_2; output;
94       !  end;
95         
96         		if cult_org_code_1 ~= . then do; organism = organism_1; cult_org_code = cult_org_code_1; org_spec = org_spec_1; output;
96       !  end; * every record has at least the first organism;
97         		else output;
98         		
99         		
100        		drop organism_1 organism_2 organism_3 organism_4 organism_5 cult_org_code_1 cult_org_code_2 cult_org_code_3
100      ! cult_org_code_4 cult_org_code_5
101        			org_spec_1 org_spec_2 org_spec_3 org_spec_4 org_spec_5;
102        	run;		
103        
4                                                          The SAS System                             14:42 Tuesday, October 5, 2010

104        	* add labels to those infections w/o a confirmed organism;
105        	data by_organism_all_infec;
106        		set  by_organism_all_infec;
107        
108        		if  (organism = "") & ~cult_obtain then organism = "(no culture obtained)";
109        		else if (organism = "") & (cult_obtain) & (~cult_positive) then organism = "(negative culture)";
110        
111        		* also add indicator for whether this is a prevalent or incident culture ;
112        		if incident then organism = trim(organism) || " - [inc.]";
113        		if ~incident then organism = trim(organism) || " - [prev.]";
114        
115        	run;
116        
117        
118        
119        	* NOW ANALYZE by site and type code - first gather total number of infections;
120        		proc means data = by_episode n;
121        			class site_code type_code;
122        			where incident = 1;
123        			var dt_infect ;
124        
125        			output out = episode_infect n(dt_infect) = inc_infect;
126        		run;
127        
128        		* post-process. remove all observations that are summarizing across a class ;
129        		data episode_infect;
130        			set episode_infect;
131        			where (site_code ~= "") & (type_code ~= "") ;
132        			drop _type_ _freq_;
133        		run;
134        
135        
136        	* then gather unique people within each infection and type+site code  ;
137        		proc sort data= by_episode; 
138        			by incident type_code site_code id;
139        		run;
140        		
141        		* reduce to one id per combination of incident, type, site ;
142        		data episode_people;
143        			set by_episode;
144        			by incident type_code site_code id;
145        			if ~first.id then delete;
146        		run;
147        
148        		* now gather totals by incidence ;
149        		proc means data = episode_people n;
150        			class incident site_code type_code;
151        			var dt_infect ;
152        
153        			output out = episode_people_out n(dt_infect) = num_patients;
154        		run;
155        
156        		* post-process. remove all observations that are summarizing across a class ;
157        		data episode_people_out;
158        			set episode_people_out;
159        			where (site_code ~= "") & (type_code ~= "") & (incident ~= .) ;
160        			drop _type_ _freq_;
161        		run;
5                                                          The SAS System                             14:42 Tuesday, October 5, 2010

162        			data a;
163        				set episode_people_out;
164        				where incident = 0;
165        			run;
166        			data b;
167        				set episode_people_out;
168        				where incident = 1;
169        			run;
170        
171        			proc sort data= a; 	by site_code type_code ; run;
172        			proc sort data= b; 	by site_code type_code; run;
173        			proc sort data= episode_infect; 	by site_code type_code; run;
174        
175        		* now put incident and prevalent patient totals together with incident infection totals ;
176        		data episode_people_out;
177        			merge a (rename =(num_patients = prev_patients))
178        				 b (rename =(num_patients = inc_patients))
179        				 episode_infect;
180        			by site_code type_code;
181        
182        			* recode missing to 0;
183        			if prev_patients = . then prev_patients = 0;
184        			if inc_patients = . then inc_patients = 0;
185        			if inc_infect = . then inc_infect = 0;
186        
187        		drop incident;
188        		run;
189        
190        
191        
192        
193        
194        		* now merge in the specific organism findings by site and type code;
195        		proc sort data=  by_organism_all_infec; 	by site_code type_code; run;
196        		data episode_people_out;
197        			merge  episode_people_out
198        					by_organism_all_infec (keep = site_code type_code organism incident)
199        					;
200        			by site_code type_code;
201        		run;
202        
203        
204        		proc sort data= episode_people_out; 	by site_code type_code incident organism ; run;
205        
206        		* touch up table, generate summary stats. white out repeats within all three levels. 
207        			so only add labels on the first of site_code type_code ;
208        
209        		data episode_summary;
210        			set episode_people_out (drop = incident); * drop incident as i will re-create it below to serve another purpose;
211        			by site_code type_code;
212        			
213        			organism = trim(organism);
214        			
215        			if first.type_code then do;
216        				* perform calculations ;
217        				prev_percent = (prev_patients / &n_study) * 100; * percent of patients with this  organism ;
218        				inc_percent = (inc_patients / &n_study) * 100; 	* percent of patients with this organism ;	
219        				if inc_percent = . then inc_percent = 0; 
6                                                          The SAS System                             14:42 Tuesday, October 5, 2010

220        
221        				* format all information in one convenient line for each infection type;
222        				prevalent = compress(put(prev_patients, 3.) || "/" || put(&n_study, 3.), ' ')  || " (" || compress((put(prev_percent,
222      !  5.1)) || "%)", ' ')  ;
223        				incident =  put(inc_infect, 3.) || " (" || compress(put(inc_patients, 3.) || "/" || put(&n_study, 3.), ' ') || ", "
223      ! || compress(put(inc_percent, 5.1) || "%)", ' ')  ;
224        			end;	
225        		run;
226        
227        
228        		/* NOW COMPUTE OVERALL TOTALS, THEN PASTE BY CENTER AND OVERALL INTO SUMMARY TABLE! */
229        		
230        			proc means data = by_episode n;
231        				where incident = 1;
232        				var dt_infect ;
233        
234        				output out = overall_infect n(dt_infect) = inc_infect;
235        			run;
236        
237        			* post-process. remove all observations that are summarizing across a class ;
238        			data overall_infect;
239        				set overall_infect;
240        				drop _type_ _freq_;
241        			run;
242        
243        
244        		* then gather unique people within each infection  code  ;
245        			proc sort data= by_episode; 
246        				by incident id;
247        			run;
248        			
249        			* reduce to one id per combination of incident ;
250        			data episode_people;
251        				set by_episode;
252        				by incident id;
253        				if ~first.id then delete;
254        			run;
255        
256        			* now gather totals by incidence ;
257        			proc means data = episode_people n;
258        				class incident ;
259        				var dt_infect ;
260        
261        				output out = overall_people_out n(dt_infect) = num_patients;
262        			run;
263        
264        			* post-process. remove all observations that are summarizing across a class ;
265        			data overall_people_out;
266        				set overall_people_out;
267        				where (incident ~= .) ;
268        				drop _type_ _freq_;
269        			run;
270        				data a;
271        					set overall_people_out;
272        					where incident = 0;
273        				run;
274        				data b;
275        					set overall_people_out;
7                                                          The SAS System                             14:42 Tuesday, October 5, 2010

276        					where incident = 1;
277        				run;
278        
279        			* now put incident and prevalent patient totals together with incident infection totals ;
280        			data overall_people_out;
281        				merge a (rename =(num_patients = prev_patients))
282        					 b (rename =(num_patients = inc_patients))
283        					 overall_infect;
284        
285        					 * by nothing, since all datasets have one observation ;
286        
287        				* recode missing to 0;
288        				if prev_patients = . then prev_patients = 0;
289        				if inc_patients = . then inc_patients = 0;
290        				if inc_infect = . then inc_infect = 0;
291        
292        				* add row title ;
293        				site_code = "Over";
294        
295        			drop incident;
296        			run;	
297        
298        
299        		/** now add by overall totals into summary table, and process **/
300        		data summary_temp;
301        			set 		
302        				overall_people_out;
303        			
304        						
305        				* perform calculations ;
306        				prev_percent = (prev_patients / &n_study) * 100; * percent of patients with this  organism ;
307        				inc_percent = (inc_patients / &n_study) * 100; 	* percent of patients with this organism ;	
308        				if inc_percent = . then inc_percent = 0; 
309        
310        				* format all information in one convenient line for each infection type;
311        				prevalent = compress(put(prev_patients, 3.) || "/" || put(&n_study, 3.), ' ')  || " (" || compress((put(prev_percent,
311      !  5.1)) || "%)", ' ')  ;
312        				incident =  put(inc_infect, 3.) || " (" || compress(put(inc_patients, 3.) || "/" || put(&n_study, 3.), ' ') || ", "
312      ! || compress(put(inc_percent, 5.1) || "%)", ' ')  ;
313        
314        		run;
315        		data episode_summary;
316        			set episode_summary
317        				summary_temp;
318        		run;
319        
320        	  
321        		* add extra formats for the summaries at the bottom to a different site_code format, stored in work, not library (where
321      !  the rest of the glnd formats are);
322        
323        		proc format library=work;
324        				value $site_code
325        					/* custom row labels*/
326        					"Over" = "Overall total:"
327        					"Site" = "Totals by site:"
328        					"Emor" = "Emory"
329        					"Miri" = "Miriam"
330        					"Vand" = "Vanderbilt"
8                                                          The SAS System                             14:42 Tuesday, October 5, 2010

331        					"Colo" = "Colorado"	
332        
333        					/* actual site codes */
334        	
335                                        "UTI"=  "Urinary Tract Infection"
336                                        "SSI"=  "Surgical Site Infection"
337                                        "PNEU"= "Pneumonia "
338                                        "BSI" = "Bloodstream Infection"
339                                        "BJ"    =       "Bone and Joint Infection"
340                                        "CNS" = "Central Nervous System Infection"
341                                        "CVS" = "Cardiovascular System Infection"
342                                        "EENT"= "Eye, Ear, Nose, Throat, or Mouth Infection"
343                                        "GI"    =       "Gastrointestinal System Infection"
344                                        "LRI"=  "Lower Respiratory Tract Infection, Other Than Pneumonia"
345                                        "REPR" = "Reproductive Tract Infection"
346                                        "SST"=  "Skin and Soft Tissue Infection"
347                                        "SYS" = "Systemic Infection"
348                                        ;
349        
350        			run;
351        
352        		options ls=250 nodate  	/*papersize= ("15", "8.5")*/  orientation =  portrait center nonumber formdlim='-' formchar =
352      ! "|----|+|---+=|-/\<>*"; * nodate contents;
353        		*ods ps file = "/glnd/sas/reporting/&filename..ps" style = journal startpage=no ;
354        		*ods pdf file = "/glnd/sas/reporting/&filename..pdf" style = journal startpage=no;
355        		ods ps file = "&filename..ps" style = journal startpage=no ;
356        		ods pdf file = "&filename..pdf" style = journal startpage=no;
357        		ods escapechar='^' ;
358        
359        
360        			* BEFORE WE DISPLAY THE FINAL TABLE, REMOVE REPEATED CAUSITIVE ORGANISMS WITHIN EACH INFECTION TYPE AND PREV/INC.
360      ! (cannot use by-statement since the table is not being displayed in a sorted fashion) ;
361        			data episode_summary;
362        				set episode_summary;
363        				retain old_site old_type old_organism;
364        	
365        				if _N_ = 1 then do;
366        					old_site = site_code;
367        					old_type = type_code;
368        					old_organism = organism;
369        				end;
370        
371        				else do;
372        					if (old_site = site_code) & (old_type = type_code) & (old_organism = organism) then delete;	
373        					else do;
374        						old_site = site_code;
375        						old_type = type_code;
376        						old_organism = organism;
377        					end;	
378        				end;		
379        			run;
380        
381        			title1 &custom_title;
382        			title2 "By clinical site and type";
383        
384        
385        			* print by site and type, with overall total at bottom ;
386        			proc print data= episode_summary noobs label width=minimum split = '*' style(table)= [font_width = compressed] ;
9                                                          The SAS System                             14:42 Tuesday, October 5, 2010

387        				id site_code type_code  ;
388        				by site_code type_code notsorted ;
389        				var prevalent /style(data) = [just=center]; * separate var statement for separate atrributes ;
390        				var incident /style(data) = [just=center]; * separate var statement for separate atrributes ;
391        				var organism;
392        
393        				label 	
394        						organism = "Causative Organisms"
395        						prevalent = "Prevalent Infec.:*# patients (% prev.)"
396        						incident = "Incident Infec.:* # infec. (#patients, % incid.)"
397        					;
398        
399        				format site_code $site_code.;
400        			run;	
401        
402        			* save a copy of this table for use by other programs (like nosocomial_rates_open.sas) ;
403        			data glnd_rep.&filename;
404        				set episode_summary;
405        
406        				* add sample size ;
407        				n = put(&n_study, 3.0);
408        			run;
409        
410        	ods pdf close;
411        	ods ps close;
412        
413        %mend nosocomial_episode_table_open;

NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           0.36 seconds
      cpu time            0.11 seconds
      
